// -------------------------------------------------------------
// 
// File Name: hdlsrc_v\DUCforLTEHDL\iSection.v
// Created: 2023-02-09 10:49:26
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: iSection
// Source Path: DUCforLTEHDL/HDL_DUC/CICInterpolator/iSection
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module iSection
          (clk,
           reset,
           enb,
           usOut_re,
           us_vout,
           internalReset,
           integOut_re);


  input   clk;
  input   reset;
  input   enb;
  input   signed [19:0] usOut_re;  // sfix20_En14
  input   us_vout;
  input   internalReset;
  output  signed [19:0] integOut_re;  // sfix20_En14


  wire signed [19:0] iOut_re4;  // sfix20_En14
  wire signed [20:0] adder_add_cast;  // sfix21_En14
  wire signed [20:0] adder_add_cast_1;  // sfix21_En14
  wire signed [20:0] addOut_re4;  // sfix21_En14
  reg signed [20:0] iOutreg_re4;  // sfix21_En14
  wire signed [19:0] iOut_re5;  // sfix20_En14
  wire signed [20:0] adder_add_cast_2;  // sfix21_En14
  wire signed [20:0] adder_add_cast_3;  // sfix21_En14
  wire signed [20:0] addOut_re5;  // sfix21_En14
  reg signed [20:0] iOutreg_re5;  // sfix21_En14
  wire signed [19:0] iOut_re6;  // sfix20_En14
  wire signed [20:0] adder_add_cast_4;  // sfix21_En14
  wire signed [20:0] adder_add_cast_5;  // sfix21_En14
  wire signed [20:0] addOut_re6;  // sfix21_En14
  reg signed [20:0] iOutreg_re6;  // sfix21_En14


  assign adder_add_cast = {usOut_re[19], usOut_re};
  assign adder_add_cast_1 = {iOut_re4[19], iOut_re4};
  assign addOut_re4 = adder_add_cast + adder_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        iOutreg_re4 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            iOutreg_re4 <= 21'sb000000000000000000000;
          end
          else begin
            if (us_vout) begin
              iOutreg_re4 <= addOut_re4;
            end
          end
        end
      end
    end



  assign iOut_re4 = iOutreg_re4[19:0];



  assign adder_add_cast_2 = {iOut_re4[19], iOut_re4};
  assign adder_add_cast_3 = {iOut_re5[19], iOut_re5};
  assign addOut_re5 = adder_add_cast_2 + adder_add_cast_3;



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        iOutreg_re5 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            iOutreg_re5 <= 21'sb000000000000000000000;
          end
          else begin
            if (us_vout) begin
              iOutreg_re5 <= addOut_re5;
            end
          end
        end
      end
    end



  assign iOut_re5 = iOutreg_re5[19:0];



  assign adder_add_cast_4 = {iOut_re5[19], iOut_re5};
  assign adder_add_cast_5 = {iOut_re6[19], iOut_re6};
  assign addOut_re6 = adder_add_cast_4 + adder_add_cast_5;



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        iOutreg_re6 <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          if (internalReset == 1'b1) begin
            iOutreg_re6 <= 21'sb000000000000000000000;
          end
          else begin
            if (us_vout) begin
              iOutreg_re6 <= addOut_re6;
            end
          end
        end
      end
    end



  assign iOut_re6 = iOutreg_re6[19:0];



  assign integOut_re = iOut_re6;

endmodule  // iSection

