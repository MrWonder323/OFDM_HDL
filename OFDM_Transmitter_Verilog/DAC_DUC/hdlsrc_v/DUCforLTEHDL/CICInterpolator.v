// -------------------------------------------------------------
// 
// File Name: hdlsrc_v\DUCforLTEHDL\CICInterpolator.v
// Created: 2023-02-09 10:49:26
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: CICInterpolator
// Source Path: DUCforLTEHDL/HDL_DUC/CICInterpolator
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CICInterpolator
          (clk,
           reset,
           enb,
           dataIn,
           validIn,
           dataOut,
           validOut);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] dataIn;  // sfix18_En14
  input   validIn;
  output  signed [17:0] dataOut;  // sfix18_En12
  output  validOut;


  wire softReset;
  reg signed [17:0] dataInreg;  // sfix18_En14
  reg  validInreg;
  wire [11:0] upsampleVal;  // ufix12
  wire signed [18:0] rdyout_re;  // sfix19_En14
  wire signed [18:0] rdyout_im;  // sfix19_En14
  wire rdy_valid;
  wire signed [19:0] combOut_re;  // sfix20_En14
  wire signed [19:0] combOut_im;  // sfix20_En14
  wire c_vout;
  wire signed [19:0] usOut_re;  // sfix20_En14
  wire us_vout;
  wire signed [17:0] invalidOut_1;  // sfix18_En12
  wire signed [19:0] integOut_re;  // sfix20_En14
  wire signed [19:0] gcOut_re;  // sfix20_En14
  wire signed [17:0] dataOut_re;  // sfix18_En12


  assign softReset = 1'b0;



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        dataInreg <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            dataInreg <= 18'sb000000000000000000;
          end
          else begin
            dataInreg <= dataIn;
          end
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        validInreg <= 1'b0;
      end
      else begin
        if (enb) begin
          if (softReset == 1'b1) begin
            validInreg <= 1'b0;
          end
          else begin
            validInreg <= validIn;
          end
        end
      end
    end



  assign upsampleVal = 12'b000000000010;



  rdySection u_rdySection (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .dataInreg(dataInreg),  // sfix18_En14
                           .validInreg(validInreg),
                           .internalReset(softReset),
                           .upsampleVal(upsampleVal),  // ufix12
                           .rdyout_re(rdyout_re),  // sfix19_En14
                           .rdyout_im(rdyout_im),  // sfix19_En14
                           .rdy_valid(rdy_valid)
                           );

  cSection u_cSection (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .rdyout_re(rdyout_re),  // sfix19_En14
                       .rdyout_im(rdyout_im),  // sfix19_En14
                       .rdy_valid(rdy_valid),
                       .internalReset(softReset),
                       .combOut_re(combOut_re),  // sfix20_En14
                       .combOut_im(combOut_im),  // sfix20_En14
                       .c_vout(c_vout)
                       );

  usSection u_usSection (.clk(clk),
                         .reset(reset),
                         .enb(enb),
                         .combOut_re(combOut_re),  // sfix20_En14
                         .combOut_im(combOut_im),  // sfix20_En14
                         .c_vout(c_vout),
                         .upsampleVal(upsampleVal),  // ufix12
                         .i_rstout(softReset),
                         .usOut_re(usOut_re),  // sfix20_En14
                         .us_vout(us_vout)
                         );

  assign invalidOut_1 = 18'sb000000000000000000;



  iSection u_iSection (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .usOut_re(usOut_re),  // sfix20_En14
                       .us_vout(us_vout),
                       .internalReset(softReset),
                       .integOut_re(integOut_re)  // sfix20_En14
                       );

  gcSection u_gcSection (.integOut_re(integOut_re),  // sfix20_En14
                         .gcOut_re(gcOut_re)  // sfix20_En14
                         );

  castSection u_castSection (.gcOut_re(gcOut_re),  // sfix20_En14
                             .dataOut_re(dataOut_re)  // sfix18_En12
                             );

  assign dataOut = (us_vout == 1'b0 ? invalidOut_1 :
              dataOut_re);



  assign validOut = us_vout;

endmodule  // CICInterpolator

