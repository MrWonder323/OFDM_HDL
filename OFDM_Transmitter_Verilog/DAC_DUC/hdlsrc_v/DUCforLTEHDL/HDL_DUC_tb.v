// -------------------------------------------------------------
// 
// File Name: hdlsrc_v\DUCforLTEHDL\HDL_DUC_tb.v
// Created: 2023-02-09 10:50:59
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 4.88281e-07
// Target subsystem base rate: 4.88281e-07
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        4.88281e-07
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1_re                       ce_out        4.88281e-07
// Out1_im                       ce_out        4.88281e-07
// Out2                          ce_out        4.88281e-07
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_DUC_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_DUC_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Out2_done;  // ufix1
  wire rdEnb;
  wire Out2_done_enb;  // ufix1
  reg [14:0] Out1_re_addr;  // ufix15
  wire Out2_lastAddr;  // ufix1
  wire resetn;
  reg  check2_done;  // ufix1
  wire Out1_re_done;  // ufix1
  wire Out1_re_done_enb;  // ufix1
  wire Out1_re_active;  // ufix1
  reg [14:0] Upsample1_out1_addr;  // ufix15
  wire [14:0] Upsample2_out1_addr_delay_1;  // ufix15
  reg  tb_enb_delay;
  reg signed [31:0] fp_ValidIn;  // sfix32
  reg  rawData_ValidIn;
  reg signed [31:0] status_ValidIn;  // sfix32
  reg  holdData_ValidIn;
  reg  ValidIn_offset;
  wire ValidIn;
  wire Upsample1_out1_active;  // ufix1
  wire Upsample1_out1_enb;  // ufix1
  wire [14:0] Upsample1_out1_addr_delay_1;  // ufix15
  reg signed [31:0] fp_dataIn;  // sfix32
  reg signed [15:0] rawData_dataIn;  // sfix16_En15
  reg signed [31:0] status_dataIn;  // sfix32
  reg signed [15:0] holdData_dataIn;  // sfix16_En15
  reg signed [15:0] dataIn_offset;  // sfix16_En15
  wire signed [15:0] dataIn;  // sfix16_En15
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  wire ce_out;
  wire signed [17:0] Out1_re;  // sfix18_En16
  wire signed [17:0] Out1_im;  // sfix18_En16
  wire Out2;
  wire Out1_re_enb;  // ufix1
  wire Out1_re_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [14:0] Out1_re_addr_delay_1;  // ufix15
  reg signed [31:0] fp_Out1_re_expected;  // sfix32
  reg signed [17:0] Out1_re_expected;  // sfix18_En16
  reg signed [31:0] status_Out1_re_expected;  // sfix32
  wire signed [17:0] Out1_re_ref;  // sfix18_En16
  reg  Out1_re_testFailure;  // ufix1
  reg signed [31:0] fp_Out1_im_expected;  // sfix32
  reg signed [17:0] Out1_im_expected;  // sfix18_En16
  reg signed [31:0] status_Out1_im_expected;  // sfix32
  wire signed [17:0] Out1_im_ref;  // sfix18_En16
  reg  Out1_im_testFailure;  // ufix1
  wire [14:0] Out2_addr_delay_1;  // ufix15
  reg signed [31:0] fp_Out2_expected;  // sfix32
  reg  Out2_expected;
  reg signed [31:0] status_Out2_expected;  // sfix32
  wire Out2_ref;
  reg  Out2_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign Out2_done_enb = Out2_done & rdEnb;



  assign Out2_lastAddr = Out1_re_addr >= 15'b101000000000000;



  assign Out2_done = Out2_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (Out2_done_enb) begin
          check2_done <= Out2_done;
        end
      end
    end

  assign Out1_re_done_enb = Out1_re_done & rdEnb;



  assign Out1_re_active = Out1_re_addr != 15'b101000000000000;



  assign #1 Upsample2_out1_addr_delay_1 = Upsample1_out1_addr;

  // Data source for ValidIn
  initial
    begin : ValidIn_fileread
      fp_ValidIn = $fopen("ValidIn.dat", "r");
      status_ValidIn = $rewind(fp_ValidIn);
    end

  always @(Upsample2_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_ValidIn <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_ValidIn = $fscanf(fp_ValidIn, "%h", rawData_ValidIn);
      end
    end

  // holdData reg for Upsample2_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Upsample2_out1
      if (reset) begin
        holdData_ValidIn <= 1'bx;
      end
      else begin
        holdData_ValidIn <= rawData_ValidIn;
      end
    end

  always @(rawData_ValidIn or rdEnb)
    begin : stimuli_Upsample2_out1_1
      if (rdEnb == 1'b0) begin
        ValidIn_offset <= holdData_ValidIn;
      end
      else begin
        ValidIn_offset <= rawData_ValidIn;
      end
    end

  assign #2 ValidIn = ValidIn_offset;

  assign Upsample1_out1_active = Upsample1_out1_addr != 15'b101000000000000;



  assign Upsample1_out1_enb = Upsample1_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 20480
  always @(posedge clk or posedge reset)
    begin : Upsample1_process
      if (reset == 1'b1) begin
        Upsample1_out1_addr <= 15'b000000000000000;
      end
      else begin
        if (Upsample1_out1_enb) begin
          if (Upsample1_out1_addr >= 15'b101000000000000) begin
            Upsample1_out1_addr <= 15'b000000000000000;
          end
          else begin
            Upsample1_out1_addr <= Upsample1_out1_addr + 15'b000000000000001;
          end
        end
      end
    end



  assign #1 Upsample1_out1_addr_delay_1 = Upsample1_out1_addr;

  // Data source for dataIn
  initial
    begin : dataIn_fileread
      fp_dataIn = $fopen("dataIn.dat", "r");
      status_dataIn = $rewind(fp_dataIn);
    end

  always @(Upsample1_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_dataIn <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_dataIn = $fscanf(fp_dataIn, "%h", rawData_dataIn);
      end
    end

  // holdData reg for Upsample1_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Upsample1_out1
      if (reset) begin
        holdData_dataIn <= 16'bx;
      end
      else begin
        holdData_dataIn <= rawData_dataIn;
      end
    end

  always @(rawData_dataIn or rdEnb)
    begin : stimuli_Upsample1_out1_1
      if (rdEnb == 1'b0) begin
        dataIn_offset <= holdData_dataIn;
      end
      else begin
        dataIn_offset <= rawData_dataIn;
      end
    end

  assign #2 dataIn = dataIn_offset;

  assign snkDonen =  ~ snkDone;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  HDL_DUC u_HDL_DUC (.clk(clk),
                     .reset(reset),
                     .clk_enable(clk_enable),
                     .dataIn(dataIn),  // sfix16_En15
                     .ValidIn(ValidIn),
                     .ce_out(ce_out),
                     .Out1_re(Out1_re),  // sfix18_En16
                     .Out1_im(Out1_im),  // sfix18_En16
                     .Out2(Out2)
                     );

  assign Out1_re_enb = ce_out & Out1_re_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 20480
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Out1_re_addr <= 15'b000000000000000;
      end
      else begin
        if (Out1_re_enb) begin
          if (Out1_re_addr >= 15'b101000000000000) begin
            Out1_re_addr <= 15'b000000000000000;
          end
          else begin
            Out1_re_addr <= Out1_re_addr + 15'b000000000000001;
          end
        end
      end
    end



  assign Out1_re_lastAddr = Out1_re_addr >= 15'b101000000000000;



  assign Out1_re_done = Out1_re_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Out1_re_done_enb) begin
          check1_done <= Out1_re_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;



  assign #1 Out1_re_addr_delay_1 = Out1_re_addr;

  // Data source for Out1_re_expected
  initial
    begin : Out1_re_expected_fileread
      fp_Out1_re_expected = $fopen("Out1_re_expected.dat", "r");
      status_Out1_re_expected = $rewind(fp_Out1_re_expected);
    end

  always @(Out1_re_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out1_re_expected <= 18'bx;
      end
      else if (ce_out == 1) begin
        status_Out1_re_expected = $fscanf(fp_Out1_re_expected, "%h", Out1_re_expected);
      end
    end

  assign Out1_re_ref = Out1_re_expected;

  always @(posedge clk or posedge reset)
    begin : Out1_re_checker
      if (reset == 1'b1) begin
        Out1_re_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out1_re !== Out1_re_ref) begin
          Out1_re_testFailure <= 1'b1;
          $display("ERROR in Out1_re at time %t : Expected '%h' Actual '%h'", $time, Out1_re_ref, Out1_re);
        end
      end
    end

  // Data source for Out1_im_expected
  initial
    begin : Out1_im_expected_fileread
      fp_Out1_im_expected = $fopen("Out1_im_expected.dat", "r");
      status_Out1_im_expected = $rewind(fp_Out1_im_expected);
    end

  always @(Out1_re_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out1_im_expected <= 18'bx;
      end
      else if (ce_out == 1) begin
        status_Out1_im_expected = $fscanf(fp_Out1_im_expected, "%h", Out1_im_expected);
      end
    end

  assign Out1_im_ref = Out1_im_expected;

  always @(posedge clk or posedge reset)
    begin : Out1_im_checker
      if (reset == 1'b1) begin
        Out1_im_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out1_im !== Out1_im_ref) begin
          Out1_im_testFailure <= 1'b1;
          $display("ERROR in Out1_im at time %t : Expected '%h' Actual '%h'", $time, Out1_im_ref, Out1_im);
        end
      end
    end

  assign #1 Out2_addr_delay_1 = Out1_re_addr;

  // Data source for Out2_expected
  initial
    begin : Out2_expected_fileread
      fp_Out2_expected = $fopen("Out2_expected.dat", "r");
      status_Out2_expected = $rewind(fp_Out2_expected);
    end

  always @(Out2_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out2_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_Out2_expected = $fscanf(fp_Out2_expected, "%h", Out2_expected);
      end
    end

  assign Out2_ref = Out2_expected;

  always @(posedge clk or posedge reset)
    begin : Out2_checker
      if (reset == 1'b1) begin
        Out2_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out2 !== Out2_ref) begin
          Out2_testFailure <= 1'b1;
          $display("ERROR in Out2 at time %t : Expected '%h' Actual '%h'", $time, Out2_ref, Out2);
        end
      end
    end

  assign testFailure = Out2_testFailure | (Out1_re_testFailure | Out1_im_testFailure);



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // HDL_DUC_tb

