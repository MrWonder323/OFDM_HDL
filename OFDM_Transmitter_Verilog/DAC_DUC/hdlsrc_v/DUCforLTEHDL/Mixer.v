// -------------------------------------------------------------
// 
// File Name: hdlsrc_v\DUCforLTEHDL\Mixer.v
// Created: 2023-02-09 10:49:26
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Mixer
// Source Path: DUCforLTEHDL/HDL_DUC/Mixer
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Mixer
          (clk,
           reset,
           enb,
           dataIn,
           ncoIn_re,
           ncoIn_im,
           mixedOut_re,
           mixedOut_im);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] dataIn;  // sfix18_En14
  input   signed [17:0] ncoIn_re;  // sfix18_En16
  input   signed [17:0] ncoIn_im;  // sfix18_En16
  output  signed [17:0] mixedOut_re;  // sfix18_En16
  output  signed [17:0] mixedOut_im;  // sfix18_En16


  wire signed [17:0] Complex_to_Real_Imag_out1;  // sfix18_En14
  wire signed [17:0] Complex_to_Real_Imag_out2;  // sfix18_En14
  reg signed [17:0] Delay1_reg [0:1];  // sfix18 [2]
  wire signed [17:0] Delay1_reg_next [0:1];  // sfix18_En14 [2]
  wire signed [17:0] Delay1_out1;  // sfix18_En14
  reg signed [17:0] Delay3_reg [0:1];  // sfix18 [2]
  wire signed [17:0] Delay3_reg_next [0:1];  // sfix18_En16 [2]
  wire signed [17:0] Delay3_out1;  // sfix18_En16
  wire signed [35:0] Product1_out1;  // sfix36_En30
  reg signed [35:0] Delay6_out1;  // sfix36_En30
  reg signed [17:0] Delay2_reg [0:1];  // sfix18 [2]
  wire signed [17:0] Delay2_reg_next [0:1];  // sfix18_En14 [2]
  wire signed [17:0] Delay2_out1;  // sfix18_En14
  reg signed [17:0] Delay4_reg [0:1];  // sfix18 [2]
  wire signed [17:0] Delay4_reg_next [0:1];  // sfix18_En16 [2]
  wire signed [17:0] Delay4_out1;  // sfix18_En16
  wire signed [35:0] Product2_out1;  // sfix36_En30
  reg signed [35:0] Delay7_out1;  // sfix36_En30
  wire signed [36:0] Add_sub_cast;  // sfix37_En30
  wire signed [36:0] Add_sub_cast_1;  // sfix37_En30
  wire signed [36:0] Add_out1;  // sfix37_En30
  reg signed [36:0] Delay12_out1;  // sfix37_En30
  wire signed [17:0] Data_Type_Conversion1_out1;  // sfix18_En16
  wire signed [35:0] Product3_out1;  // sfix36_En30
  reg signed [35:0] Delay10_out1;  // sfix36_En30
  wire signed [35:0] Product4_out1;  // sfix36_En30
  reg signed [35:0] Delay11_out1;  // sfix36_En30
  wire signed [36:0] Add1_add_cast;  // sfix37_En30
  wire signed [36:0] Add1_add_cast_1;  // sfix37_En30
  wire signed [36:0] Add1_out1;  // sfix37_En30
  reg signed [36:0] Delay13_out1;  // sfix37_En30
  wire signed [17:0] Data_Type_Conversion2_out1;  // sfix18_En16

//  initial begin
//    Delay1_reg[0] = 18'sb000000000000000000;
//    Delay1_reg[1] = 18'sb000000000000000000;
//    Delay3_reg[0] = 18'sb000000000000000000;
//    Delay3_reg[1] = 18'sb000000000000000000;
//    Delay6_out1 = 36'sh000000000;
//    Delay2_reg[0] = 18'sb000000000000000000;
//    Delay2_reg[1] = 18'sb000000000000000000;
//    Delay4_reg[0] = 18'sb000000000000000000;
//    Delay4_reg[1] = 18'sb000000000000000000;
//    Delay7_out1 = 36'sh000000000;
//    Delay12_out1 = 37'sh0000000000;
//    Delay10_out1 = 36'sh000000000;
//    Delay11_out1 = 36'sh000000000;
//    Delay13_out1 = 37'sh0000000000;
//  end

  assign Complex_to_Real_Imag_out1 = dataIn;
  assign Complex_to_Real_Imag_out2 = 18'sb000000000000000000;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
        if (reset == 1'b1) begin
            Delay1_reg[0] <= 18'sb000000000000000000;
            Delay1_reg[1] <= 18'sb000000000000000000;
        end 
      else begin
          if (enb) begin
            Delay1_reg[0] <= Delay1_reg_next[0];
            Delay1_reg[1] <= Delay1_reg_next[1];
          end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = Complex_to_Real_Imag_out1;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay3_process
    if (reset == 1'b1) begin
            Delay3_reg[0] <= 18'sb000000000000000000;
            Delay3_reg[1] <= 18'sb000000000000000000;
        end 
      else begin
          if (enb) begin
            Delay3_reg[0] <= Delay3_reg_next[0];
            Delay3_reg[1] <= Delay3_reg_next[1];
          end
      end
    end

  assign Delay3_out1 = Delay3_reg[1];
  assign Delay3_reg_next[0] = ncoIn_re;
  assign Delay3_reg_next[1] = Delay3_reg[0];



  assign Product1_out1 = Delay1_out1 * Delay3_out1;



  always @(posedge clk or posedge reset)
    begin : Delay6_process
        if (reset == 1'b1) begin
            Delay6_out1 <= 36'sh000000000;
        end 
      else begin
          if (enb) begin
            Delay6_out1 <= Product1_out1;
          end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
    if (reset == 1'b1) begin
            Delay2_reg[0] <= 18'sb000000000000000000;
            Delay2_reg[1] <= 18'sb000000000000000000;
        end 
      else begin
      if (enb) begin
        Delay2_reg[0] <= Delay2_reg_next[0];
        Delay2_reg[1] <= Delay2_reg_next[1];
      end
      end
    end

  assign Delay2_out1 = Delay2_reg[1];
  assign Delay2_reg_next[0] = Complex_to_Real_Imag_out2;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay4_process
    if (reset == 1'b1) begin
            Delay4_reg[0] <= 18'sb000000000000000000;
            Delay4_reg[1] <= 18'sb000000000000000000;
        end 
      else begin
      if (enb) begin
        Delay4_reg[0] <= Delay4_reg_next[0];
        Delay4_reg[1] <= Delay4_reg_next[1];
      end
      end
    end

  assign Delay4_out1 = Delay4_reg[1];
  assign Delay4_reg_next[0] = ncoIn_im;
  assign Delay4_reg_next[1] = Delay4_reg[0];



  assign Product2_out1 = Delay2_out1 * Delay4_out1;



  always @(posedge clk or posedge reset)
    begin : Delay7_process
    if (reset == 1'b1) begin
            Delay7_out1 <= 36'sh000000000;
        end 
      else begin
      if (enb) begin
        Delay7_out1 <= Product2_out1;
      end
      end
    end



  assign Add_sub_cast = {Delay6_out1[35], Delay6_out1};
  assign Add_sub_cast_1 = {Delay7_out1[35], Delay7_out1};
  assign Add_out1 = Add_sub_cast - Add_sub_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay12_process
    if (reset == 1'b1) begin
            Delay12_out1 <= 37'sh0000000000;
        end 
      else begin
      if (enb) begin
        Delay12_out1 <= Add_out1;
      end
      end
    end



  assign Data_Type_Conversion1_out1 = Delay12_out1[31:14];



  assign mixedOut_re = Data_Type_Conversion1_out1;

  assign Product3_out1 = Delay3_out1 * Delay2_out1;



  always @(posedge clk or posedge reset)
    begin : Delay10_process
    if (reset == 1'b1) begin
            Delay10_out1 = 36'sh000000000;
        end 
      else begin
      if (enb) begin
        Delay10_out1 <= Product3_out1;
      end
      end
    end



  assign Product4_out1 = Delay4_out1 * Delay1_out1;



  always @(posedge clk or posedge reset)
    begin : Delay11_process
    if (reset == 1'b1) begin
            Delay11_out1 = 36'sh000000000;
        end 
      else begin
      if (enb) begin
        Delay11_out1 <= Product4_out1;
      end
      end
    end



  assign Add1_add_cast = {Delay10_out1[35], Delay10_out1};
  assign Add1_add_cast_1 = {Delay11_out1[35], Delay11_out1};
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;



  always @(posedge clk or posedge reset)
    begin : Delay13_process
    if (reset == 1'b1) begin
            Delay13_out1 = 37'sh0000000000;
        end 
      else begin
      if (enb) begin
        Delay13_out1 <= Add1_out1;
      end
      end
    end



  assign Data_Type_Conversion2_out1 = Delay13_out1[31:14];



  assign mixedOut_im = Data_Type_Conversion2_out1;

endmodule  // Mixer

